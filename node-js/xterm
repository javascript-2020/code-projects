
    var image_name    = ['nodejs-min','debian-min','debian'][0];    
    
    var dockerfile    = `https://raw.githubusercontent.com/javascript-2020/docker/main/dockerfile/${image_name}.dockerfile`;
    var cp            = require('child_process');
    
(async()=>{

        var {code,stdout,stderr}    = await exec(`docker images ${image_name} --no-trunc`);
        if(code)return console.log('error');
        if(stdout.indexOf(image_name)==-1){
              var {code,stdout,stderr}    = await exec(`docker build -t ${image_name} ${dockerfile} `);
              if(code)return console.log('error');
        }


        var name    = await getname();
        if(!name)return;

        
        var {code}    = await exec(`docker run -di -p :22 --name ${name} ${image_name}`);
        if(code)return console.log('error');

        
        var port    = await getport(name);
        console.log(`*** launch : ${name}:${port}`);


        eval(list.view.find.cur('term','txt'))(name,port);
        
        
        
})();



        async function getname(){
          
              do{
                    var name      = get();
                    var result    = await chk(name);
                    if(result===false){
                          return false;
                    }
                    
              }while(result!==true);
              
              return name;
                    
                    
              function get(){
                
                    var col       = ['red','blue','pink','aqua','gold','gray','lime','navy'];
                    var flower    = ['rose','lily','iris','fern','dahlia','tulip','pansy','basil','sage','mint'];
                    var rnd       = arr=>arr[Math.floor(Math.random()*arr.length)];
                    var name      = `${image_name}---${rnd(col)}-${rnd(flower)}`;
                    return name;
                    
              }//get
        
              async function chk(name){
                
                    var {code,stdout,stderr}    = await exec('docker ps -f name=terminal');
                    if(code){
                          console.log('error');
                          return false;
                    }
                    if(stdout.indexOf(name)!=-1){
                          return 'found';
                    }
                    return true;
                    
              }//chk
                    
        }//getname
        
        async function getport(name){
          
              var {code,stdout,stderr}    = await exec(`docker port ${name}`);
              if(code)return console.log('error');
              var i       = stdout.indexOf(':');
              var port    = stdout.slice(i+1,-1);
              return port;
              
        }//getport
        
        function exec(cmd){
          
              var resolve,promise=new Promise(res=>resolve=res);
              var args    = cmd.split(' ');
              var cmd     = args.splice(0,1)[0];
              var child   = cp.spawn(cmd,args,{shell:true});
              var stdout='',stderr='';
              child.stdout.on('data',data=>(stdout+=data,console.log(data.toString())));
              child.stderr.on('data',data=>(stderr+=data,console.log(data.toString())));
              child.on('exit',code=>(console.log('code:',code),resolve({code,stdout,stderr})));
              return promise;
              
        }//exec
        
        
        
        
        
        

function terminal(name,port){
  
        srcdoc      = srcdoc();
        
        iframe.new(srcdoc,'attach',{onload});

        
        function onload(view){
        
              var view    = list[list.index];
              
              $(view.root,'iframe').style.height    = '750px';
          
        }//onload


        function srcdoc(){
          
              return `
              
                    <head>
                          <style>
                                html { height:100% }
                                body { height:calc(100% - 16px);display:flex;flex-direction:column;font-family:arial; }
                                #hdr { display:flex };
                                #terminal { height:100% }
                          </style>
                          
                          <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@xterm/xterm/css/xterm.min.css">
                    </head>
                    
                    <body>
                      
                      <div id=hdr>
                            <div>${name}</div>
                            <input type=button value=remove onclick=remove()>
                      </div>
                      
                      <div id=terminal></div>
                      
                      <script type=module>
                      
                              import xterm from 'https://cdn.jsdelivr.net/npm/@xterm/xterm@5.5.0/+esm';
                              import addonFit from 'https://cdn.jsdelivr.net/npm/@xterm/addon-fit/+esm';
                    
                              var host='127.0.0.1',port=${port},username='root',password='node';
                              var con;
                              
                              window.onbeforeunload=close;
                              
                              window.onload=()=>{
                              
                                  var term        = new xterm.Terminal();
                                  var fitAddon    = new addonFit.FitAddon();
                                  term.loadAddon(fitAddon);
                          
                                  term.open(terminal);
                                  
                                  term.onResize(size=>fitAddon.fit());
                                  term.onKey(({key,domEvent:e})=>{
                                  
                                      switch(e.key){
                                      
                                        case 'Escape'       : close();
                                                              return;
                                                              
                                      }//switch
                        
                                      fitAddon.fit();
                                      stream.write(key);
                                      fitAddon.fit();
                                      
                                  });
                    
                    
                                  var {Client}    = window.parent.require('ssh2');
                                  con             = new Client();
                                  var stream;
                                  
                                  con.on('ready',()=>{
                                  
                                        fitAddon.fit();
                                        term.focus();
                    
                                        con.shell((err,stream2)=>{
                                        
                                              if(err)throw err;
                                              
                                              stream    = stream2;
                                              stream.on('close',()=>close);
                                              stream.on('data',data=>{fitAddon.fit();term.write(data)});
                                          
                                        });
                                        
                                  });
                              
                                  con.connect({host,port,username,password,debug:console.log});
                            
                            
                            }//onload


                            window.close=function(){
                            
                                  con.end();
                                  window.parent.nodejs.iframe.remove(window);
                                  
                            }//close
                            
                            
                            window.remove=async function(){
                            
                                  close();
                                  var {code,stdout,stderr}   = await exec(`docker rm -f ${name}`);
                                  if(code)return console.log('error');
                                  
                            }//remove
                            
                            
                      </script>
                    </body>
                    
              
              `;

        }//srcdoc
        
        
}//terminal







        var name    = 'nodejs-min---pink-ivy';
        
        remove_container(name);


        async function remove_container(name){
        
              var {code,stdout,stderr}   = await exec(`docker rm -f ${name}`);
              if(code)return console.log('error');
              
        }//remove

/* node-js-tabs
{"names":["launch","term","remove"],"info":[["launch","term",3600,5477,"append"],["launch","remove",9077,311,"append"]]}
*/