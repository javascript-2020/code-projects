




        var image_name    = ['nodejs-min','debian-min','debian'][0];    
    
        var dockerfile    = `https://raw.githubusercontent.com/javascript-2020/docker/main/dockerfile/${image_name}.dockerfile`;
        
        
        var fs            = require('fs');
        var cp            = require('child_process');


;    
(async()=>{


        console.log('docker image : ',image_name);


        var {err}             = await build(image_name);
        if(err)return;


        var {err,name,port}   = await run(image_name,name,port);
        if(err)return;


        var terminal          = define(list.cur.view.find('terminal','txt'));
        terminal(port,{name,debug:false});
                
        
})()
;


        async function build(image_name){
          
              var {code,stdout,stderr}    = await exec(`docker images ${image_name} --no-trunc`);
              if(code){
                    console.error('error');
                    return {err:true};
              }
              
              if(stdout.indexOf(image_name)!=-1){
                    return {err:false};
              }

              
              var cmd   = `docker build -t ${image_name} `;
              if(fs.existsSync(`${image_name}.dockerfile`)){
                    cmd  += `-f ${image_name}.dockerfile .`;
              }else{
                    cmd  += dockerfile;
              }
              
              var {code,stdout,stderr}    = await exec(`docker build -t ${image_name} ${dockerfile} `);
              if(code){
                    console.error('error');
                    return {err:true};
              }
              
              return {err:false};
              
        }//build


        async function run(image_name,name,port){
                        
              if(!name){
                    var {err,name}    = await getname(image_name);
                    if(err)return err;
              }
                                                                                    //console.log('container : ',name);

              port    ||= '';
              var {code}    = await exec(`docker run -di -p ${port}:22 --name ${name} ${image_name}`);
              if(code){
                    console.error('error');
                    return {err:true};
              }              
              var {err,port}    = await getport(name);
              if(err)return err;
              
                                                                                    console.log(`*** container : ${name}:${port}`);
              return {name,port};
          
        }//run

        
        async function getname(image_name){
          
              var {code,stdout,stderr}    = await exec('docker ps -f name=terminal');
              if(code){
                    console.error('error');
                    return {err:true};
              }
              
              var col       = ['red','blue','pink','aqua','gold','gray','lime','navy'];
              var flower    = ['rose','lily','iris','fern','dahlia','tulip','pansy','basil','sage','mint'];
              var rnd       = arr=>arr[Math.floor(Math.random()*arr.length)];
              var get       = ()=>`${image_name}---${rnd(col)}-${rnd(flower)}`;
              var c         = 0;
              var t         = 2*col.length*flower.length;
              
              while(c!=t){
                
                    var name      = get();
                    
                    if(stdout.indexOf(name)==-1){
                          return {name};
                    }
                    
                    c++;
                    
              }//while
              
              console.error('error');
              console.log('!! failed to get name !!');
              return {err:true};
              
        }//getname

        
        async function getport(name){
          
              var {code,stdout,stderr}    = await exec(`docker port ${name}`);
              if(code){
                    console.error('error');
                    return {err:true};
              }
              
              var i       = stdout.indexOf(':');
              var port    = stdout.slice(i+1,-1);
              return {port};
              
        }//getport

        
        async function remove_container(name){
        
              var {code,stdout,stderr}   = await exec(`docker rm -f ${name}`);
              if(code)return console.log('error');
              
        }//remove
        
        
        
        
/* node-js-tabs
{"names":["docker","create","terminal"],"info":[["docker","create",4719,186,"append"],["docker","terminal",4905,6626,"append"]]}
*/
        var port    = '62255';
        var name    = '';

        var terminal    = define(list.view.find.cur('terminal','txt'));
        terminal(port,{name,debug:false});





function terminal(port,{name,debug,height}){
  
        name    ||= 'terminal';
        height  ||= '600px';
        
        iframe.new(srcdoc(),'attach',{onload});

        
        function onload(view){
        
              view.win.debug    = debug;
              
              $(view.root,'iframe').style.height    = height;
              
        }//onload


        function srcdoc(){
          
              return `
              
                    <head>
                          <style>
                                html { height:100% }
                                body { height:calc(100% - 16px);display:flex;flex-direction:column;font-family:arial; }
                                #hdr { display:flex;margin-bottom:10px }
                                #hdr-name { flex:1;font-family:monospace;font-size:16px; }
                                #hdr-btn { padding:5px 10px;font-size:16px;cursor:pointer; }
                                #terminal { flex:1 }
                          </style>
                          
                          <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@xterm/xterm/css/xterm.min.css">
                    </head>
                    
                    <body>
                      
                          <div id=hdr>
                                <div id=hdr-name>${name}</div>
                                <input id=hdr-btn type=button value=remove onclick=remove()>
                          </div>
                          
                          <div id=terminal></div>
                          
                          <script type=module>
                          
                                  var host='127.0.0.1',port=${port},username='root',password='node';
                                  
                                  console.log('terminal',\`\${username}@\${host}:${port} ${name}\`);
                                  document.getElementById('hdr-name').textContent  = \`\${username}@\${host}:${port} ${name}\`;
                                  
                                  import xterm from 'https://cdn.jsdelivr.net/npm/@xterm/xterm@5.5.0/+esm';
                                  import addonFit from 'https://cdn.jsdelivr.net/npm/@xterm/addon-fit/+esm';
                        
                                  var con;
                                  
                                  window.onbeforeunload=close;
                                  
                                  window.onload=()=>{
                                  
                                      var term        = new xterm.Terminal();
                                      var fitAddon    = new addonFit.FitAddon();
                                      term.loadAddon(fitAddon);
                              
                                      term.open(terminal);
                                      
                                      term.onResize(size=>fitAddon.fit());
                                      term.onKey(({key,domEvent:e})=>{
                                      
                                          switch(e.key){
                                          
                                            case 'Escape'       : close();
                                                                  return;
                                                                  
                                          }//switch
                            
                                          fitAddon.fit();
                                          stream.write(key);
                                          fitAddon.fit();
                                          
                                      });
                        
                        
                                      var {Client}    = window.parent.require('ssh2');
                                      con             = new Client();
                                      var stream;
                                      
                                      con.on('ready',()=>{
                                      
                                            fitAddon.fit();
                                            term.focus();
                        
                                            con.shell((err,stream2)=>{
                                            
                                                  if(err)throw err;
                                                  
                                                  fitAddon.fit();
                                                  stream    = stream2;
                                                  stream.on('close',()=>close);
                                                  stream.on('data',data=>{fitAddon.fit();term.write(data)});
                                              
                                            });
                                            
                                      });
    
                                  
                                      var opts    = {host,port,username,password};
                                      if(window.debug)opts.debug   = console.log;
                                      
                                      con.connect(opts);
                                
                                
                                }//onload
    
    
                                window.close=function(){
                                
                                      con.end();
                                      window.parent.nodejs.iframe.remove(window);
                                      
                                }//close
                                
                                
                                window.remove=async function(){
                                
                                      var {code,stdout,stderr}   = await window.parent.exec(\`docker rm -f ${name}\`);
                                      if(code)return console.log('error');
                                      close();
                                      
                                }//remove
                                
                          </script>
                          
                    </body>
                    
              `;

        }//srcdoc
        
        
}//terminal






/* node-js-tabs
{"names":["docker","create","terminal"],"info":[["docker","create",4870,186,"append"],["docker","terminal",5056,6626,"append"]]}
*/